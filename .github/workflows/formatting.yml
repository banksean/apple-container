name: Code Formatting
on:
  workflow_call:
    inputs:
      auto_fix:
        description: "Automatically fix formatting issues instead of just checking"
        required: false
        type: boolean
        default: false
    outputs:
      commit_sha:
        description: "The SHA of the commit with formatting fixes"
        value: ${{ jobs.formatting.outputs.commit_sha }}
  push:
    branches-ignore:
      - "queue-main-*"
      - "queue-dev-*"
  pull_request:

permissions:
  contents: write

jobs:
  formatting:
    outputs:
      commit_sha: ${{ steps.get_commit.outputs.commit_sha }}
    runs-on: macos-26-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ (inputs.auto_fix == true && (github.head_ref || github.ref)) || (github.event_name == 'pull_request' && github.event.pull_request.head.sha) || github.ref }}
          # Need full history for queue-main pushes
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Install gofumpt v0.8.0
        run: |
          go install mvdan.cc/gofumpt@latest
      - name: Check formatting
        if: inputs.auto_fix != true
        run: |
          scripts/run-formatters.sh check
          ROOT_EXIT=$?
          # If check failed, exit with error
          if [ $ROOT_EXIT -ne 0 ]; then
            exit 1
          fi

      - name: Fix formatting
        if: inputs.auto_fix == true
        run: |
          # Run both formatters in parallel
          scripts/run-formatters.sh fix
          ROOT_EXIT=$?

          # If fix failed, exit with error
          if [ $ROOT_EXIT -ne 0 ]; then
            exit 1
          fi

       # Commit formatting fixes if auto_fix is true
      - name: Commit and push formatting fixes if needed
        if: inputs.auto_fix == true
        run: |
          # Only proceed if there are changes to commit
          if [[ -z $(git status --porcelain) ]]; then
            echo "No formatting changes detected, skipping commit"
            exit 0
          fi

          git config --global user.name "Autoformatter"
          git add .

          git fetch origin main
          MERGE_BASE=$(git merge-base HEAD origin/main)
          COMMIT_COUNT=$(git rev-list --count $MERGE_BASE..HEAD)

          # Check if there are multiple commits
          if [ "$COMMIT_COUNT" -gt 1 ]; then
            echo "Found multiple commits ($COMMIT_COUNT) since merge-base with origin/main. Creating a new commit."
            git commit -m "all: fix formatting"
          else
            # There is exactly one commit, check file paths
            echo "Found exactly one commit since merge-base with origin/main. Checking file paths."

            # Assert there is only one commit
            if [ "$COMMIT_COUNT" -ne 1 ]; then
              echo "Error: Expected exactly one commit, found $COMMIT_COUNT"
              exit 1
            fi
          fi

          git push -f https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD


      - name: Get commit SHA
        id: get_commit
        run: echo "commit_sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
